We need to implement a Python CLI tool to bulk extract saved Nexus credentials from a Jenkins server. It should be implemented with the Typer library and support automatic shell command-line completions and rich coloured help syntax. It needs to query the list of jenkins servers available in a Tailscale VPN network available locally on the user's computer, but validate that Tailscale is logged in and available beforehand.

For example, on macOS I use this shell alias:

tss='/Applications/Tailscale.app/Contents/MacOS/Tailscale status'

...and then to list the jenkins servers, run:

tss | grep jenkins

Our implementation needs to work on both macOS and Linux, and use the appropriate tailscale status command in both cases. It then needs to download the "Linux Foundation platforms inventory page" from the URL below:

https://docs.releng.linuxfoundation.org/en/latest/infra/inventory.html

It then needs to prompt the user for the desired project name, presenting a list of projects that have Jenkins systems, and ignoring those projects where no jenkins server exists. Some projects have difrerent names/aliases, because the project has been renamed, or in some cases the name is shortened/abbreviated. We need to do a bit of fuzzy matching, since some projects may have different naming:

e.g. Here are some example variations:

Opendaylight, ODL
ONAP, ECOMP
O-RAN, ORAN, O-Ran-SC
Anuket/OPNFV

You can research each project listed using their Wikipedia or project home page online; perhaps gather some information and store it in a file on disk here, that will help build a mapping table that can be used to help with the fuzzy matching of the project name.

We then need to use some CLI automation to SCP the remote credential file using the Tailscale VPN endpoint address for the production Jenkins instance, ignoring the sandbox instances:

e.g. 100.110.117.7   vex-sjc-oran-jenkins-prod-1 tagged-devices linux -

NOT: 100.85.52.44    vex-sjc-oran-jenkins-sandbox-1 tagged-devices linux -

The path to the credential file on the remote server's filesystem/disk is: /var/lib/jenkins/credentials.xml

This should respect and use the user's SSH configuration and any authentication prompts, such as for secure enclave, biometrics ot Yubikey PIN entry. The file shouild download to the current workign directory.

Then go to the Jenkins script console URL:

https://jenkins.o-ran-sc.org/manage/script

For each repository name in the project, a separate credential exists in the credentials.xml file. Effectively, the repository name is the username. The password string in the credentials.xml file is encrypted with a reversible algorithm. Jenkins script console provides an interface to decrypt the password. Take the password for the repository/user and decrypt it by putting a query into the jenkins script console:

Here's an example:

encrypted_pw = '{AQAAABAAAAAwy5gL4M5KpiHQ9KdYUUv5QxXNpDT9vMA3gWHIQAaeWKlHUdhbivEIJz4r0VbpnUbBfOpPKhYZPi5hFPSMvVaWJA==}'
passwd = hudson.util.Secret.decrypt(encrypted_pw)
println(passwd)

Where the password above:

AQAAABAAAAAwy5gL4M5KpiHQ9KdYUUv5QxXNpDT9vMA3gWHIQAaeWKlHUdhbivEIJz4r0VbpnUbBfOpPKhYZPi5hFPSMvVaWJA==

Has been extracted from the credentials file (this example is for the o-du-l2 repository/user)

An example URL for the O-RAN-SC Jenkins server script console would be:

https://jenkins.o-ran-sc.org/manage/script

For each repository/username, we need to add a row to a new output file, credentials.txt

The format of this file should simply be the credential string, followed by a space, followed by the repository/user name.

We will end up with a single file containing all the Nexus passwords for the different repositories that have been extracted and decrypted from Jenkins for the given project. I have provided a sample credentials.xml file in the resources folder already, so you can see the syntax.

Implement this using modern PEP standards, using pyproject.tml and PDM as the build backend. It needs the source code to go in src/ and for there to be a Python module. It is envisioned that the tool will eventually be published to PyPI.

Let's make sure we understand the linting setup and write code designed to pass the existing linting rules in the provided .pre-commit-config.yaml file. For example, we need all files to have explcit SPDX licensing/copyright string in them, e.g.

# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

(using the file-type specific comment format)

Hey, let's call this tool jenkins_credential_extractor, and be less specific that we are extracting Nexus credentials? Then please continue?

Also, here's an example Nexus credential we want to extract (there will be many others in a similar format):

        <com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl>
          <scope>GLOBAL</scope>
          <id>o-du-l2</id>
          <description>o-du-l2 Nexus deployment</description>
          <username>o-du-l2</username>
          <password>{AQAAABAAAAAwy5gL4M5KpiHQ9KdYUUv5QxXNpDT9vMA3gWHIQAaeWKlHUdhbivEIJz4r0VbpnUbBfOpPKhYZPi5hFPSMvVaWJA==}</password>
          <usernameSecret>true</usernameSecret>

Perhaps we can prompt the user for common strings used in the descrioption field, such as in this case:

"Nexus deployment"

...which is likely to be the common feature we want to use in this specific scenario, but where this could vary in different use case.